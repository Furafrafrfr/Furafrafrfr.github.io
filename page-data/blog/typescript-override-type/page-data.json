{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/blog/typescript-override-type","result":{"data":{"site":{"siteMetadata":{"description":"ぐっちーのブログ","lang":"ja","siteUrl":"https://furafrafrfr.github.io","title":"ぐちろぐ"}},"file":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/static/3650662aee295838bcf985eac750f63e/c7240/header_icon.png","srcSet":"/static/3650662aee295838bcf985eac750f63e/de3a1/header_icon.png 150w,\n/static/3650662aee295838bcf985eac750f63e/30cdc/header_icon.png 300w,\n/static/3650662aee295838bcf985eac750f63e/c7240/header_icon.png 600w","sizes":"(min-width: 600px) 600px, 100vw"},"sources":[{"srcSet":"/static/3650662aee295838bcf985eac750f63e/c65bc/header_icon.webp 150w,\n/static/3650662aee295838bcf985eac750f63e/078c3/header_icon.webp 300w,\n/static/3650662aee295838bcf985eac750f63e/6d09e/header_icon.webp 600w","type":"image/webp","sizes":"(min-width: 600px) 600px, 100vw"}]},"width":600,"height":600}}},"markdownRemark":{"frontmatter":{"category":["TypeScript"],"title":"TypeScriptでオブジェクトのプロパティを上書きする型を作った","slug":"/blog/typescript-override-type","date":"2022-11-11"},"html":"<p>例えば</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Hoge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  fuga<span class=\"token operator\">:</span> <span class=\"token string\">'fugafuga'</span><span class=\"token punctuation\">;</span>\n  piyo<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>のような型があったときに<code>piyo</code>の型を上書きしてくれる型が必要だった。バグの原因になりそうではあるのでなるべく避けたほうが良さそう？</p>\n<h2>作ったもの</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Override<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>型<code>T</code>を型<code>K</code>で上書きする。<code>T</code>は<code>K</code>の部分型もどき（プロパティの名前だけ共通していてプロパティの型は同じとは限らない）。<code>Omit&#x3C;T, keyof K></code>で<code>T</code>から上書きしたいプロパティを取り除いた型を作り、それを<code>K</code>とのインターセクション型で拡張。</p>\n<p>というのを作ってから調べてみたら似たようなことをされている方がいらっしゃった。(<a href=\"https://qiita.com/ibaragi/items/2a6412aeaca5703694b1\">https://qiita.com/ibaragi/items/2a6412aeaca5703694b1</a>)</p>\n<h2>なぜ必要だったか</h2>\n<p>Gatsby.js のお話。GraphQL Typegen でクエリの結果の型を生成したが gatsby-plugin-image の<code>gatsbyImageData</code>の型が<code>IGatsbyImageData</code>ではなく<code>Record&#x3C;string, unknown></code>で生成されていた。それが原因で<code>getImage</code>だったり<code>getSrc</code>に引数としてクエリの結果を渡せなかった。そこで、生成された型を上書きして新しい型を作ることにした。</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">BlogPage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">file</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hogehoge\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token object\">childImageSharp</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property-query\">gatsbyImageData</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token object\">hokanimo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token object\">iroiro</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">arimasu</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>みたいなクエリに対して</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> Queries <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">BlogPageQuery</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> file<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">readonly</span> childImageSharp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">readonly</span> gatsbyImageData<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> hokanimo<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">readonly</span> iroiro<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">readonly</span> arimasu<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>みたいな型が GraphQL Typegen で生成される。これを</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ts line-numbers\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ImageFileNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  file<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    childImageSharp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      gatsbyImageData<span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gatsby-plugin-image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>IGatsbyImageData<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> BlogTemplate<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>\n  PageProps<span class=\"token operator\">&lt;</span>Override<span class=\"token operator\">&lt;</span>Queries<span class=\"token punctuation\">.</span>BlogPageQuery<span class=\"token punctuation\">,</span> ImageFileNode<span class=\"token operator\">>></span>\n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>というような感じで使うとうまくいく。</p>\n<p>ドキュメントには gatsby-plugin-image についても正しい型が生成されるみたいなことが書いてあるはずなんですけどね（<a href=\"https://www.gatsbyjs.com/docs/how-to/local-development/graphql-typegen/#tips\">https://www.gatsbyjs.com/docs/how-to/local-development/graphql-typegen/#tips</a>）。後で調べます。</p>\n<h2>終わりに</h2>\n<p>TypeScript、概ねいいけどTypeScript以外の部分？に型を与えるのが大変そう。</p>\n<h2>参考にしたもの</h2>\n<ul>\n<li><a href=\"https://qiita.com/ibaragi/items/2a6412aeaca5703694b1\">[Typescript] オブジェクトの特定プロパティの型を上書きする型関数をつくる</a></li>\n</ul>"}},"pageContext":{"slug":"/blog/typescript-override-type"}},"staticQueryHashes":["2530755699","3200490486"]}